{"mappings":"ACGA,MAAM,EAAa,CACjB,KAAM,YACN,MAAO,aACP,GAAI,UACJ,KAAM,WACR,EAGM,EAAc,SAAS,aAAa,CAAC,UACrC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAgB,SAAS,gBAAgB,CAAC,MAC1C,EAAW,CACf,KAAM,SAAS,aAAa,CAAC,iBAC7B,IAAK,SAAS,aAAa,CAAC,gBAC5B,MAAO,SAAS,aAAa,CAAC,iBAChC,CCfA,OAAM,EACJ,OAAO,aAAe,CACpB,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,CAAE,AAEF,aAAY,EAAe,IAAI,CAAC,oBAAoB,EAAE,CAAE,CACtD,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAC/C,IAAI,CAAC,MAAM,CAAG,EAAK,YAAY,CAAC,IAAI,CACpC,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,sBAAuB,CACrB,MAAO,MAAM,CACV,IAAI,CAAC,GACL,GAAG,CAAC,IAAM,MAAM,CAAG,IAAI,CAAC,GAC7B,CAEA,UAAW,CACT,GAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAC/B,OAGF,IAAM,EAAe,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,SAAS,CAAC,IAE5D,IAAI,CAAC,eAAe,CAAC,GACrB,IAAI,CAAC,iBAAiB,EACxB,CAEA,WAAY,CACV,IAAM,EAAgB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CAAC,OAAO,IAE9D,GAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GACrB,OAGF,IAAM,EAAe,EAAc,GAAG,CAAC,AAAC,GAEtC,IAAI,CAAC,SAAS,CAAC,GAAK,OAAO,IAExB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAE,KAIvC,IAAI,CAAC,eAAe,CAAC,GACrB,IAAI,CAAC,iBAAiB,GACxB,CAEA,QAAS,CACP,IAAM,EAAoB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAErD,GAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GACrB,OAGF,IAAM,EAAe,EAAkB,GAAG,CAAC,AAAC,GAE1C,IAAI,CAAC,SAAS,CAAC,IAAI,EAAI,GACnB,EAAmB,IAAI,CAAC,UAAU,CAAC,GAEzC,IAAI,CAAC,eAAe,CAAC,GACrB,IAAI,CAAC,iBAAiB,EACxB,CAEA,UAAW,CAET,IAAM,EAAgB,AADI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EACb,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CAAC,OAAO,IAErE,GAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GACrB,OAGF,IAAM,EAAe,EAAc,GAAG,CAAC,AAAC,GAEtC,IAAI,CAAC,SAAS,CAAC,GAAK,OAAO,IACvB,EAAmB,IAAI,CAAC,UAAU,CAAC,GAEzC,IAAI,CAAC,eAAe,CAAC,GACrB,IAAI,CAAC,iBAAiB,EACxB,CAEA,iBAAiB,CAAM,CAAE,CAAM,CAAE,CAC/B,OAAO,KAAK,SAAS,CAAC,KAAY,KAAK,SAAS,CAAC,EACnD,CAEA,UAAU,CAAM,CAAE,CAChB,IAAM,EAAS,EAAE,CACb,EAAI,EAER,KAAO,EAAI,EAAO,MAAM,EAAE,CACxB,IAAM,EAAU,CAAM,CAAC,EAAE,CACnB,EAAO,CAAM,CAAC,EAAI,EAAE,CAEtB,EACE,IAAY,GACd,EAAO,IAAI,CAAC,AAAU,EAAV,GACZ,IAAI,CAAC,KAAK,EAAI,AAAU,EAAV,EACd,GAAK,IAEL,EAAO,IAAI,CAAC,GACZ,KAGF,GAEJ,CAEA,KAAO,EAAO,MAAM,CAAG,EAAO,MAAM,EAClC,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,EAAK,YAAY,CAAC,OAAO,CACvC,IAAI,CAAC,iBAAiB,CAAC,EACzB,CAEA,SAAU,CACR,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CAAG,EAAK,YAAY,CAAC,IAAI,CACpC,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,iBAAkB,CAChB,IAAM,EAAa,IAAI,CAAC,aAAa,GAErC,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAKF,GAAM,CAAC,EAAK,EAAI,CADd,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAG3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnD,CAEA,eAAgB,CAGd,OAAO,AAFQ,IAAI,CAAC,QAAQ,GAGzB,OAAO,CAAC,CAAC,EAAK,IAEb,EAAI,GAAG,CAAC,CAAC,EAAM,IAAc,AAAS,IAAT,EAAa,CAAC,EAAU,EAAS,CAAG,OAClE,MAAM,CAAC,QACZ,CAEA,WAAW,CAAM,CAAE,CACjB,IAAM,EAAO,EAAO,MAAM,CACpB,EAAO,CAAM,CAAC,EAAE,CAAC,MAAM,CACvB,EAAe,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAK,EAAG,IAEhD,MAAM,GAAM,IAAI,CAAC,KAEnB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAM,IAC5B,IAAK,IAAI,EAAM,EAAG,EAAM,EAAM,IAAO,CAEnC,IAAM,EAAS,EAAO,EAAI,CAE1B,CAAA,CAAY,CAHG,EAGK,CAAC,EAAO,CAAG,CAAM,CAAC,EAAI,CAAC,EAAI,AACjD,CAGF,OAAO,CACT,CAEA,YAAY,CAAM,CAAE,CAClB,IAAM,EAAO,EAAO,MAAM,CACpB,EAAO,CAAM,CAAC,EAAE,CAAC,MAAM,CACvB,EAAe,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAK,EAAG,IAChD,MAAM,GAAM,IAAI,CAAC,KAEnB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAM,IAC5B,IAAK,IAAI,EAAM,EAAG,EAAM,EAAM,IAAO,CAEnC,IAAM,EAAS,CAEf,CAAA,CAAY,CAHG,EAAO,EAAI,EAGN,CAAC,EAAO,CAAG,CAAM,CAAC,EAAI,CAAC,EAAI,AACjD,CAGF,OAAO,CACT,CAEA,aAAa,CAAK,CAAE,CAClB,GAAI,IAAI,CAAC,MAAM,GAAK,EAAK,YAAY,CAAC,OAAO,CAC3C,MAAO,CAAA,EAGT,IAAK,IAAM,KAAO,EAAO,CACvB,IAAI,EAAwB,CAAA,EACxB,EAAuB,CAAA,EAE3B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAG,EAAG,IAAK,CACvC,GAAI,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,CAAE,CACzB,EAAwB,CAAA,EACxB,KACF,CAEe,IAAX,CAAG,CAAC,EAAE,EACR,CAAA,EAAuB,CAAA,CADzB,CAGF,CAEA,GAAI,GAAyB,EAC3B,MAAO,CAAA,CAEX,CAEA,MAAO,CAAA,CACT,CAEA,kBAAkB,EAAQ,CAAC,CAAE,CAC3B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,IACzB,IAAI,CAAC,eAAe,GAGtB,IAAM,EAAQ,IAAI,CAAC,QAAQ,GAEvB,IAAI,CAAC,SAAS,CAAC,GACjB,IAAI,CAAC,MAAM,CAAG,EAAK,YAAY,CAAC,GAAG,CAC1B,IAAI,CAAC,QAAQ,CAAC,IACvB,CAAA,IAAI,CAAC,MAAM,CAAG,EAAK,YAAY,CAAC,IAAI,AAAJ,CAEpC,CAEA,SAAS,CAAK,CAAE,CACd,IAAM,EAAe,IAAI,CAAC,WAAW,CAAC,GAEtC,MAAO,CAAC,EAAO,EAAa,CAAC,KAAK,CAChC,AAAC,GAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,GAEzC,CAEA,UAAU,CAAK,CAAE,CACf,OAAO,EAAM,IAAI,GAAG,QAAQ,CAAC,KAC/B,CAEA,YAAa,CACX,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CACtD,CAEA,gBAAgB,CAAK,CAAE,CACrB,IAAI,CAAC,KAAK,CAAG,CACf,CACF,CDnPA,MAAM,EAAO,ICqPI,EDnPjB,IAAI,EAAc,CAAA,EAGlB,MAAM,EAAmB,KACvB,IAAM,EAAQ,EAAK,QAAQ,GAE3B,EAAc,OAAO,CAAC,CAAC,EAAK,KAC1B,MAAM,IAAI,CAAC,EAAI,KAAK,EAAE,OAAO,CAAC,AAAC,IAC7B,IAAM,EAAY,EAAK,SAAS,CAC1B,EAAY,CAAK,CAAC,EAAS,CAAC,EAAU,AAE5C,CAAA,EAAK,WAAW,CAAG,GACnB,EAAK,SAAS,CAAG,aAEC,IAAd,IACF,EAAK,WAAW,CAAG,EACnB,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAU,CAAC,EAEjD,EACF,EACF,EAGM,EAAgB,KACpB,OAAO,MAAM,CAAC,GAAU,OAAO,CAAC,AAAC,GAAY,EAAQ,SAAS,CAAC,GAAG,CAAC,WAEnE,IAAM,EAAa,EAAK,SAAS,EAE7B,AAAe,CAAA,QAAf,EACF,EAAS,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,UACrB,AAAe,SAAf,EACT,EAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UACP,SAAf,GACT,EAAS,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,SAEpC,EAGM,EAAc,KAClB,EAAU,WAAW,CAAG,EAAK,QAAQ,EACvC,EAqDA,EAAY,gBAAgB,CAAC,QAlDX,KACZ,AAA4B,UAA5B,EAAY,WAAW,CACzB,EAAK,KAAK,GAC2B,YAA5B,EAAY,WAAW,GAChC,EAAK,OAAO,GACZ,EAAY,WAAW,CAAG,QAC1B,EAAY,SAAS,CAAC,OAAO,CAAC,UAAW,SACzC,KAGF,IACA,IACA,EAAc,CAAA,CAChB,GAsCA,SAAS,gBAAgB,CAAC,UAnCH,AAAC,IACtB,GAAI,AAAqB,SAArB,EAAK,SAAS,IAIlB,OAAQ,EAAE,GAAG,EACX,KAAK,EAAW,IAAI,CAClB,EAAK,QAAQ,GACb,KACF,MAAK,EAAW,KAAK,CACnB,EAAK,SAAS,GACd,KACF,MAAK,EAAW,EAAE,CAChB,EAAK,MAAM,GACX,KACF,MAAK,EAAW,IAAI,CAClB,EAAK,QAAQ,GACb,KACF,SACE,MACJ,CAEI,IACF,EAAY,WAAW,CAAG,UAC1B,EAAY,SAAS,CAAC,OAAO,CAAC,QAAS,WACvC,EAAc,CAAA,GAGhB,IACA,IACA,IACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\n// Arrow key constants\nconst $09e991522ca7e64e$var$ARROW_KEYS = {\n    LEFT: \"ArrowLeft\",\n    RIGHT: \"ArrowRight\",\n    UP: \"ArrowUp\",\n    DOWN: \"ArrowDown\"\n};\n// DOM elements\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$gameBoardRows = document.querySelectorAll(\"tr\");\nconst $09e991522ca7e64e$var$messages = {\n    lose: document.querySelector(\".message-lose\"),\n    win: document.querySelector(\".message-win\"),\n    start: document.querySelector(\".message-start\")\n};\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable prettier/prettier */ \"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static gameStatuses = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    constructor(initialState = this.generateDefaultState()){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.IDLE;\n        this.score = 0;\n    }\n    generateDefaultState() {\n        return Array(4).fill(0).map(()=>Array(4).fill(0));\n    }\n    moveLeft() {\n        if (!this.isStateValid(this.state)) return;\n        const updatedState = this.state.map((row)=>this.applyMove(row));\n        this.updateGameState(updatedState);\n        this.completeMoveTasks();\n    }\n    moveRight() {\n        const reversedState = this.state.map((row)=>[\n                ...row\n            ].reverse());\n        if (!this.isStateValid(reversedState)) return;\n        const updatedState = reversedState.map((row)=>// eslint-disable-next-line prettier/prettier\n            this.applyMove(row).reverse());\n        if (!this.isStateDifferent(this.state, updatedState)) return;\n        this.updateGameState(updatedState);\n        this.completeMoveTasks();\n    }\n    moveUp() {\n        const rotatedRightState = this.rotateRight(this.state);\n        if (!this.isStateValid(rotatedRightState)) return;\n        const updatedState = rotatedRightState.map((row)=>// eslint-disable-next-line prettier/prettier\n            this.applyMove([\n                ...row\n            ]));\n        const rotatedLeftState = this.rotateLeft(updatedState);\n        this.updateGameState(rotatedLeftState);\n        this.completeMoveTasks();\n    }\n    moveDown() {\n        const rotatedRightState = this.rotateRight(this.state);\n        const reversedState = rotatedRightState.map((row)=>[\n                ...row\n            ].reverse());\n        if (!this.isStateValid(reversedState)) return;\n        const updatedState = reversedState.map((row)=>// eslint-disable-next-line prettier/prettier\n            this.applyMove(row).reverse());\n        const rotatedLeftState = this.rotateLeft(updatedState);\n        this.updateGameState(rotatedLeftState);\n        this.completeMoveTasks();\n    }\n    isStateDifferent(stateA, stateB) {\n        return JSON.stringify(stateA) !== JSON.stringify(stateB);\n    }\n    applyMove(vector) {\n        const newRow = [];\n        let i = 0;\n        while(i < vector.length){\n            const current = vector[i];\n            const next = vector[i + 1];\n            if (current) {\n                if (current === next) {\n                    newRow.push(current * 2);\n                    this.score += current * 2;\n                    i += 2;\n                } else {\n                    newRow.push(current);\n                    i++;\n                }\n            } else i++;\n        }\n        while(newRow.length < vector.length)newRow.push(0);\n        return newRow;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.PLAYING;\n        this.completeMoveTasks(2);\n    }\n    restart() {\n        this.resetState();\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.IDLE;\n        this.score = 0;\n    }\n    generateNewTile() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length === 0) return;\n        const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const [row, col] = randomCell;\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    getEmptyCells() {\n        const matrix = this.getState();\n        return matrix.flatMap((row, rowIndex)=>// eslint-disable-next-line prettier/prettier, max-len, comma-dangle\n            row.map((cell, colIndex)=>cell === 0 ? [\n                    rowIndex,\n                    colIndex\n                ] : null)).filter(Boolean);\n    }\n    rotateLeft(matrix) {\n        const rows = matrix.length;\n        const cols = matrix[0].length;\n        const resultMatrix = Array.from({\n            length: cols\n        }, ()=>// eslint-disable-next-line comma-dangle\n            Array(rows).fill(\"\"));\n        for(let row = 0; row < rows; row++)for(let col = 0; col < cols; col++){\n            const newRow = col;\n            const newCol = rows - 1 - row;\n            resultMatrix[newRow][newCol] = matrix[row][col];\n        }\n        return resultMatrix;\n    }\n    rotateRight(matrix) {\n        const rows = matrix.length;\n        const cols = matrix[0].length;\n        const resultMatrix = Array.from({\n            length: cols\n        }, ()=>Array(rows).fill(\"\"));\n        for(let row = 0; row < rows; row++)for(let col = 0; col < cols; col++){\n            const newRow = cols - 1 - col;\n            const newCol = row;\n            resultMatrix[newRow][newCol] = matrix[row][col];\n        }\n        return resultMatrix;\n    }\n    isStateValid(state) {\n        if (this.status !== $a5fd07fa01589658$var$Game.gameStatuses.PLAYING) return false;\n        for (const row of state){\n            let hasAdjacentEqualCells = false;\n            let hasIsolatedEmptyCell = false;\n            for(let i = 0; i < row.length - 1; i++){\n                if (row[i] === row[i + 1]) {\n                    hasAdjacentEqualCells = true;\n                    break;\n                }\n                if (row[i] === 0) hasIsolatedEmptyCell = true;\n            }\n            if (hasAdjacentEqualCells || hasIsolatedEmptyCell) return true;\n        }\n        return false;\n    }\n    completeMoveTasks(count = 1) {\n        for(let i = 0; i < count; i++)this.generateNewTile();\n        const state = this.getState();\n        if (this.isVictory(state)) this.status = $a5fd07fa01589658$var$Game.gameStatuses.WIN;\n        else if (this.isDefeat(state)) this.status = $a5fd07fa01589658$var$Game.gameStatuses.LOSE;\n    }\n    isDefeat(state) {\n        const rotatedState = this.rotateRight(state);\n        return [\n            state,\n            rotatedState\n        ].every((currentState)=>!this.isStateValid(currentState));\n    }\n    isVictory(state) {\n        return state.flat().includes(2048);\n    }\n    resetState() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    updateGameState(state) {\n        this.state = state;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nlet $09e991522ca7e64e$var$isFirstMove = true;\n/** Updates the game board with the current game state. */ const $09e991522ca7e64e$var$updateGameFields = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$gameBoardRows.forEach((row, rowIndex)=>{\n        Array.from(row.cells).forEach((cell)=>{\n            const cellIndex = cell.cellIndex;\n            const cellValue = state[rowIndex][cellIndex];\n            cell.textContent = \"\";\n            cell.className = \"field-cell\";\n            if (cellValue !== 0) {\n                cell.textContent = cellValue;\n                cell.classList.add(`field-cell--${cellValue}`);\n            }\n        });\n    });\n};\n/** Updates the visible game message based on the current game status. */ const $09e991522ca7e64e$var$updateMessage = ()=>{\n    Object.values($09e991522ca7e64e$var$messages).forEach((message)=>message.classList.add(\"hidden\"));\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") $09e991522ca7e64e$var$messages.win.classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") $09e991522ca7e64e$var$messages.lose.classList.remove(\"hidden\");\n    else if (gameStatus === \"idle\") $09e991522ca7e64e$var$messages.start.classList.remove(\"hidden\");\n};\n/** Updates the game score display. */ const $09e991522ca7e64e$var$updateScore = ()=>{\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n};\n/** Starts or restarts the game. */ const $09e991522ca7e64e$var$startGame = ()=>{\n    if ($09e991522ca7e64e$var$startButton.textContent === \"Start\") $09e991522ca7e64e$var$game.start();\n    else if ($09e991522ca7e64e$var$startButton.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.replace(\"restart\", \"start\");\n        $09e991522ca7e64e$var$updateScore();\n    }\n    $09e991522ca7e64e$var$updateGameFields();\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$isFirstMove = true;\n};\n/** Handles arrow key presses for game moves. */ const $09e991522ca7e64e$var$handleArrowKey = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") return;\n    switch(e.key){\n        case $09e991522ca7e64e$var$ARROW_KEYS.LEFT:\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case $09e991522ca7e64e$var$ARROW_KEYS.RIGHT:\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case $09e991522ca7e64e$var$ARROW_KEYS.UP:\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case $09e991522ca7e64e$var$ARROW_KEYS.DOWN:\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return; // Ignore other keys\n    }\n    if ($09e991522ca7e64e$var$isFirstMove) {\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$isFirstMove = false;\n    }\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$updateGameFields();\n    $09e991522ca7e64e$var$updateScore();\n};\n// Event listeners\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleArrowKey);\n\n\n//# sourceMappingURL=index.ec64fb36.js.map\n","'use strict';\n\n// Arrow key constants\nconst ARROW_KEYS = {\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n};\n\n// DOM elements\nconst startButton = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\nconst gameBoardRows = document.querySelectorAll('tr');\nconst messages = {\n  lose: document.querySelector('.message-lose'),\n  win: document.querySelector('.message-win'),\n  start: document.querySelector('.message-start'),\n};\n\n// Game setup\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nlet isFirstMove = true;\n\n/** Updates the game board with the current game state. */\nconst updateGameFields = () => {\n  const state = game.getState();\n\n  gameBoardRows.forEach((row, rowIndex) => {\n    Array.from(row.cells).forEach((cell) => {\n      const cellIndex = cell.cellIndex;\n      const cellValue = state[rowIndex][cellIndex];\n\n      cell.textContent = '';\n      cell.className = 'field-cell';\n\n      if (cellValue !== 0) {\n        cell.textContent = cellValue;\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n    });\n  });\n};\n\n/** Updates the visible game message based on the current game status. */\nconst updateMessage = () => {\n  Object.values(messages).forEach((message) => message.classList.add('hidden'));\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    messages.win.classList.remove('hidden');\n  } else if (gameStatus === 'lose') {\n    messages.lose.classList.remove('hidden');\n  } else if (gameStatus === 'idle') {\n    messages.start.classList.remove('hidden');\n  }\n};\n\n/** Updates the game score display. */\nconst updateScore = () => {\n  gameScore.textContent = game.getScore();\n};\n\n/** Starts or restarts the game. */\nconst startGame = () => {\n  if (startButton.textContent === 'Start') {\n    game.start();\n  } else if (startButton.textContent === 'Restart') {\n    game.restart();\n    startButton.textContent = 'Start';\n    startButton.classList.replace('restart', 'start');\n    updateScore();\n  }\n\n  updateGameFields();\n  updateMessage();\n  isFirstMove = true;\n};\n\n/** Handles arrow key presses for game moves. */\nconst handleArrowKey = (e) => {\n  if (game.getStatus() === 'idle') {\n    return;\n  }\n\n  switch (e.key) {\n    case ARROW_KEYS.LEFT:\n      game.moveLeft();\n      break;\n    case ARROW_KEYS.RIGHT:\n      game.moveRight();\n      break;\n    case ARROW_KEYS.UP:\n      game.moveUp();\n      break;\n    case ARROW_KEYS.DOWN:\n      game.moveDown();\n      break;\n    default:\n      return; // Ignore other keys\n  }\n\n  if (isFirstMove) {\n    startButton.textContent = 'Restart';\n    startButton.classList.replace('start', 'restart');\n    isFirstMove = false;\n  }\n\n  updateMessage();\n  updateGameFields();\n  updateScore();\n};\n\n// Event listeners\nstartButton.addEventListener('click', startGame);\ndocument.addEventListener('keydown', handleArrowKey);\n","/* eslint-disable prettier/prettier */\n'use strict';\n\nclass Game {\n  static gameStatuses = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  constructor(initialState = this.generateDefaultState()) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.status = Game.gameStatuses.IDLE;\n    this.score = 0;\n  }\n\n  generateDefaultState() {\n    return Array(4)\n      .fill(0)\n      .map(() => Array(4).fill(0));\n  }\n\n  moveLeft() {\n    if (!this.isStateValid(this.state)) {\n      return;\n    }\n\n    const updatedState = this.state.map((row) => this.applyMove(row));\n\n    this.updateGameState(updatedState);\n    this.completeMoveTasks();\n  }\n\n  moveRight() {\n    const reversedState = this.state.map((row) => [...row].reverse());\n\n    if (!this.isStateValid(reversedState)) {\n      return;\n    }\n\n    const updatedState = reversedState.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      this.applyMove(row).reverse());\n\n    if (!this.isStateDifferent(this.state, updatedState)) {\n      return;\n    }\n\n    this.updateGameState(updatedState);\n    this.completeMoveTasks();\n  }\n\n  moveUp() {\n    const rotatedRightState = this.rotateRight(this.state);\n\n    if (!this.isStateValid(rotatedRightState)) {\n      return;\n    }\n\n    const updatedState = rotatedRightState.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      this.applyMove([...row]));\n    const rotatedLeftState = this.rotateLeft(updatedState);\n\n    this.updateGameState(rotatedLeftState);\n    this.completeMoveTasks();\n  }\n\n  moveDown() {\n    const rotatedRightState = this.rotateRight(this.state);\n    const reversedState = rotatedRightState.map((row) => [...row].reverse());\n\n    if (!this.isStateValid(reversedState)) {\n      return;\n    }\n\n    const updatedState = reversedState.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      this.applyMove(row).reverse());\n    const rotatedLeftState = this.rotateLeft(updatedState);\n\n    this.updateGameState(rotatedLeftState);\n    this.completeMoveTasks();\n  }\n\n  isStateDifferent(stateA, stateB) {\n    return JSON.stringify(stateA) !== JSON.stringify(stateB);\n  }\n\n  applyMove(vector) {\n    const newRow = [];\n    let i = 0;\n\n    while (i < vector.length) {\n      const current = vector[i];\n      const next = vector[i + 1];\n\n      if (current) {\n        if (current === next) {\n          newRow.push(current * 2);\n          this.score += current * 2;\n          i += 2;\n        } else {\n          newRow.push(current);\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    while (newRow.length < vector.length) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.gameStatuses.PLAYING;\n    this.completeMoveTasks(2);\n  }\n\n  restart() {\n    this.resetState();\n    this.status = Game.gameStatuses.IDLE;\n    this.score = 0;\n  }\n\n  generateNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomCell =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const [row, col] = randomCell;\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getEmptyCells() {\n    const matrix = this.getState();\n\n    return matrix\n      .flatMap((row, rowIndex) =>\n        // eslint-disable-next-line prettier/prettier, max-len, comma-dangle\n        row.map((cell, colIndex) => (cell === 0 ? [rowIndex, colIndex] : null)),)\n      .filter(Boolean);\n  }\n\n  rotateLeft(matrix) {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n    const resultMatrix = Array.from({ length: cols }, () =>\n      // eslint-disable-next-line comma-dangle\n      Array(rows).fill(''),);\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const newRow = col;\n        const newCol = rows - 1 - row;\n\n        resultMatrix[newRow][newCol] = matrix[row][col];\n      }\n    }\n\n    return resultMatrix;\n  }\n\n  rotateRight(matrix) {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n    const resultMatrix = Array.from({ length: cols }, () =>\n      Array(rows).fill(''));\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const newRow = cols - 1 - col;\n        const newCol = row;\n\n        resultMatrix[newRow][newCol] = matrix[row][col];\n      }\n    }\n\n    return resultMatrix;\n  }\n\n  isStateValid(state) {\n    if (this.status !== Game.gameStatuses.PLAYING) {\n      return false;\n    }\n\n    for (const row of state) {\n      let hasAdjacentEqualCells = false;\n      let hasIsolatedEmptyCell = false;\n\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] === row[i + 1]) {\n          hasAdjacentEqualCells = true;\n          break;\n        }\n\n        if (row[i] === 0) {\n          hasIsolatedEmptyCell = true;\n        }\n      }\n\n      if (hasAdjacentEqualCells || hasIsolatedEmptyCell) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  completeMoveTasks(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.generateNewTile();\n    }\n\n    const state = this.getState();\n\n    if (this.isVictory(state)) {\n      this.status = Game.gameStatuses.WIN;\n    } else if (this.isDefeat(state)) {\n      this.status = Game.gameStatuses.LOSE;\n    }\n  }\n\n  isDefeat(state) {\n    const rotatedState = this.rotateRight(state);\n\n    return [state, rotatedState].every(\n      (currentState) => !this.isStateValid(currentState),\n    );\n  }\n\n  isVictory(state) {\n    return state.flat().includes(2048);\n  }\n\n  resetState() {\n    this.state = this.initialState.map((row) => [...row]);\n  }\n\n  updateGameState(state) {\n    this.state = state;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$ARROW_KEYS","LEFT","RIGHT","UP","DOWN","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$gameBoardRows","querySelectorAll","$09e991522ca7e64e$var$messages","lose","win","start","$a5fd07fa01589658$var$Game","gameStatuses","IDLE","PLAYING","WIN","LOSE","constructor","initialState","generateDefaultState","state","map","row","status","score","Array","fill","moveLeft","isStateValid","updatedState","applyMove","updateGameState","completeMoveTasks","moveRight","reversedState","reverse","isStateDifferent","moveUp","rotatedRightState","rotateRight","rotatedLeftState","rotateLeft","moveDown","stateA","stateB","JSON","stringify","vector","newRow","i","length","current","next","push","getScore","getState","getStatus","restart","resetState","generateNewTile","emptyCells","getEmptyCells","col","Math","floor","random","matrix","flatMap","rowIndex","cell","colIndex","filter","Boolean","rows","cols","resultMatrix","from","newCol","hasAdjacentEqualCells","hasIsolatedEmptyCell","count","isVictory","isDefeat","rotatedState","every","currentState","flat","includes","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$isFirstMove","$09e991522ca7e64e$var$updateGameFields","forEach","cells","cellIndex","cellValue","textContent","className","classList","add","$09e991522ca7e64e$var$updateMessage","Object","values","message","gameStatus","remove","$09e991522ca7e64e$var$updateScore","addEventListener","replace","e","key"],"version":3,"file":"index.ec64fb36.js.map"}